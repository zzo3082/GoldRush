@model IEnumerable<Test_Login.Models.stockPrice>
@using Microsoft.AspNet.Identity
@using Test_Login.Models
@using Test_Login.Models.Extensions;

<script src="https://cdn.anychart.com/releases/v8/js/anychart-base.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-ui.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-exports.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-stock.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-data-adapter.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"
        integrity="sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI="
        crossorigin="anonymous"></script>
@*<script src="https://cdn.anychart.com/csv-data/csco-daily.js"></script>*@
<script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-annotations.min.js"></script>
<link href="https://cdn.anychart.com/releases/v8/css/anychart-ui.min.css" type="text/css" rel="stylesheet">
<link href="https://cdn.anychart.com/releases/v8/fonts/css/anychart-font.min.css" type="text/css" rel="stylesheet">
<style type="text/css">
    #chartjs {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .list-group {
        margin-bottom: 10px;
    }

    .list-group-item {
        margin: 0;
    }

    .anychart-credits-text, .anychart-credits-logo {
        display: none !important;
    }

    Hiding the checkbox, but allowing it to be focused
    .badgebox {
        opacity: 0;
    }

    .badgebox + .badge {
        /* Move the check mark away when unchecked*/
        text-indent: -999999px;
        /* Makes the badge's width stay the same checked and unchecked*/
        width: 27px;
    }

    .badgebox:checked + .badge {
        /*Move the check mark back when checked*/
        text-indent: 0;
    }

    .search {
        position: relative;
        display: inline-block;
    }
</style>

<body>

    <div class="container">
        <h3>
            @ViewBag.id
            <span>
                    @{ 
                        string user = User.Identity.GetStockBag();
                        if (user?.Contains(ViewBag.stockID))
                        {
                            <label for="isLike">
                            <svg width="20px" id="likeSVG" class="w-6 h-6" fill="gray" stroke="gray" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg></label>
                            <input type="checkbox" id="isLike" onchange="isLikeCheck()" checked style="display:none" />
                        }
                        else
                        {
                            <label for="isLike">
                            <svg width="20px" id="likeSVG" class="w-6 h-6" fill="none" stroke="gray" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg></label>
                            <input type="checkbox" id="isLike" onchange="isLikeCheck()" style="display:none" />
                        }
                    }
            </span>
        </h3>

        <div class="row">
            <div class="col-md-3">
                <h4>主圖指標</h4>
                <div class="list-group">
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawCol()" id="btnCol" style="display:none">
                        <span class="badge">&check;</span>成交量(Volume)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawSMA()" id="btnSMA" style="display:none">
                        <span class="badge">&check;</span>移動平均線(MA)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawEMA()" id="btnEMA" style="display:none">
                        <span class="badge">&check;</span>指數移動平均線(EMA)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawBBands()" id="btnBBands" style="display:none">
                        <span class="badge">&check;</span>布林通道
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawKC()" id="btnKC" style="display:none">
                        <span class="badge">&check;</span>肯特納通道(KC)
                    </label>
                </div>
                <h4>副圖指標</h4>
                <div class="list-group">
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawKD()" id="btnKD" style="display:none" />
                        <span class="badge">&check;</span>隨機震盪指標(KD)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawMACD()" id="btnMACD" style="display:none" />
                        <span class="badge">&check;</span>指數平滑異同移動平均線(MACD)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawRSI()" id="btnRSI" style="display:none" />
                        <span class="badge">&check;</span>相對強弱指標(RSI)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawADL()" id="btnADL" style="display:none" />
                        <span class="badge">&check;</span>累積/分配線(ADL)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawAroon()" id="btnAroon" style="display:none" />
                        <span class="badge">&check;</span>阿隆指標(Aroon)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawATR()" id="btnATR" style="display:none" />
                        <span class="badge">&check;</span>真實波動幅度均值(ATR)
                    </label>
                    <label class="list-group-item list-group-item-action btn">
                        <input class="form-check-input me-1 badgebox" type="checkbox" onchange="drawAO()" id="btnAO" style="display:none" />
                        <span class="badge">&check;</span>動量震盪指標(AO)
                    </label>
                </div>
            </div>
            <div class="col-md-9">
                <select id="typeSelect" onclick="create()">
                    <option value="default" selected disabled>繪圖工具</option>
                    <option value="andrews-pitchfork">分叉線</option>
                    <option value="horizontal-line">水平線</option>
                    <option value="vertical-line">垂直線</option>
                    <option value="infinite-line">線段（無限長）</option>
                    <option value="line">線段</option>
                    <option value="ray">放射線</option>
                    <option value="marker">標記</option>
                    <option value="rectangle">長方形</option>
                    <option value="triangle">三角形</option>
                    <option value="ellipse">橢圓</option>
                    <option value="trend-channel">趨勢通道</option>
                    <option value="fibonacci-arc">Fibonacci弧形</option>
                    <option value="fibonacci-fan">Fibonacci扇形</option>
                    <option value="fibonacci-retracement">Fibonacci回調線</option>
                    <option value="fibonacci-timezones">Fibonacci時區</option>
                </select>
                <button class="btn btn-light" onclick="removeAll()">移除全部</button>
                <button class="btn btn-light" onclick="removeSelected()">移除選定</button>
                <button class="btn btn-light" onclick="chart.contextMenu().show(900, 260)">設定</button>
                <div id="chartjs"></div>
            </div>
        </div>
    </div>
</body>

<script type="text/javascript">
    var model = @Html.Raw(Json.Encode(Model));
    var stockData = [];
    for (let i = 0; i < model.length; i++) {
        var date = model[i].stockDate.substring(0, 4) + "-" + model[i].stockDate.substring(4, 6) + "-" + model[i].stockDate.substring(6, 8);
        stockData.push(
            [
            new Date(date),
            Number(model[i].openPrice),
            Number(model[i].highPrice),
            Number(model[i].lowPrice),
            Number(model[i].endPrice),
            Number(model[i].numOfTrade)
            ]
        );
    }

    // set the data
    var table = anychart.data.table();
    table.addData(stockData);

    // map the data for candlestick plot
    mapping = table.mapAs();
    mapping.addField('date', 0);
    mapping.addField('open', 1);
    mapping.addField('high', 2);
    mapping.addField('low', 3);
    mapping.addField('close', 4);
    mapping.addField('volume', 5);

    //// for SMA
    //mapping_sma = table.mapAs({ 'x': "x", 'value': "l" });
    //// for histogram
    //mappping_volume = table.mapAs({ 'x': "x", 'value': "v" });

    // [chart] in
    var chart = anychart.stock();
    chart.padding(10, 10, 10, 50);

    var plot = chart.plot(0);
    // set the series for candlestick plot
    var series = plot.candlestick(mapping).zIndex(10);
    series.name("@ViewBag.id");

    series.risingStroke("#FF0000");
    series.risingFill("#FF0000");
    series.fallingStroke("#006400");
    series.fallingFill("#006400");

    // adjusting major and minor grids
    //var yGrid = plot.yMinorGrid();
    //yGrid.stroke('#CFD8DC');

    chart.splitters().normal().stroke({
        color: 'red',
        dash: '3 4',
        thickness: 2,
        opacity: 0.9,
    });

    chart.splitters().hovered().stroke({
        color: 'blue',
        dash: '3 4',
        thickness: 2,
        opacity: 0.9
    });

    //chart.splitters().preview().fill({
    //    color: 'green',
    //    opacity: 0.5
    //});

    // set plot.height won't work
    // plot.maxHeight('80%');
    // chart.title('@ViewBag.id');
    chart.container('chartjs');
    chart.draw();
    // select the latest 40 points just like the last 2 month data
    chart.selectRange('points', 40, true);

    // 主圖指標
    function drawCol() {
        if ($('#btnCol').is(":checked")) {
            console.log('123');
            // set the series for histogram
            mapping_col = table.mapAs();
            mapping_col.addField('value', 5);
            var series_hist = plot.column(mapping_col);
            series_hist.id("col");
            // set volume series settings
            series_hist.zIndex(100).maxHeight('20%').bottom(0);

            // create a logarithmic scale
            var customScale = anychart.scales.log();

            // sets y-scale
            series_hist.yScale(customScale);
            series_hist.name("成交量");
            series_hist.risingStroke("#FF0000");
            series_hist.risingFill("#FF0000", 0.6);
            series_hist.fallingStroke("#006400");
            series_hist.fallingFill("#006400", 0.6);
        } else {
            console.log('456');
            plot.removeSeries("col");
        }
    }

    function drawSMA() {
        if ($('#btnSMA').is(":checked")) {
            // set the series for SMA
            var sma5 = plot.sma(mapping, 5).series();
            sma5.id("sma5");
            sma5.stroke('#bf360c');

            var sma20 = plot.sma(mapping, 20).series();
            sma20.id("sma20");
            sma20.stroke('#ff6d00');

            var sma60 = plot.sma(mapping, 60).series();
            sma60.id("sma60");
            sma60.stroke('#00BDBD');
        } else {
            plot.removeSeries("sma5");
            plot.removeSeries("sma20");
            plot.removeSeries("sma60");
        }
    }

    function drawEMA() {
        if ($('#btnEMA').is(":checked")) {
            // set the series for EMA
            var ema5 = plot.ema(mapping, 5).series();
            ema5.id("ema5");
            ema5.stroke('#bf360c');

            var ema20 = plot.ema(mapping, 20).series();
            ema20.id("ema20");
            ema20.stroke('#ff6d00');

            var ema60 = plot.ema(mapping, 60).series();
            ema60.id("ema60");
            ema60.stroke('#00BDBD');
        } else {
            plot.removeSeries("ema5");
            plot.removeSeries("ema20");
            plot.removeSeries("ema60");
        }
    }

    function drawBBands() {
        if ($('#btnBBands').is(":checked")) {
            bbands = plot.bbands(mapping);
        } else {
            var id = bbands.lowerSeries().id();
            plot.removeSeries(id);

            id = bbands.upperSeries().id();
            plot.removeSeries(id);

            id = bbands.middleSeries().id();
            plot.removeSeries(id);

            id = bbands.rangeSeries().id();
            plot.removeSeries(id);
        }
    }

    function drawKC() {
        if ($('#btnKC').is(":checked")) {
            kc = plot.keltnerChannels(mapping);
        } else {
            var id = kc.maSeries().id();
            plot.removeSeries(id);

            id = kc.rangeSeries().id();
            plot.removeSeries(id);
        }
    }

    // 副圖指標
    var plotIndex = 0;

    function drawKD() {
        if ($('#btnKD').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotKDJ = chart.plot(plotIndex);
            // create first KDJ indicator of default series type
            var kdj = plotKDJ.kdj(mapping, 10, "EMA", 10, "SMA", 20);
            kdj.kSeries().stroke("#bf360c");
            kdj.dSeries().stroke("#02660c");
            kdj.jSeries().stroke("#0228b2");
        } else {
            console.log("456");
            plotIndex--;
            plotKDJ.removeAllSeries();
            plotKDJ.enabled(false);

        }
    }

    function drawMACD() {
        if ($('#btnMACD').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotMACD = chart.plot(plotIndex);
            macd = plotMACD.macd(mapping, 12, 26, 9);
            macd.histogramSeries().normal().fill('red', 0.3).stroke('red');
            macd.histogramSeries().normal().negativeFill('green', 0.3).negativeStroke('green');
        } else {
            plotIndex--;
            plotMACD.removeAllSeries();
            plotMACD.enabled(false);
        }
    }

    function drawRSI() {
        if ($('#btnRSI').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotRSI = chart.plot(plotIndex);
            rsi = plotRSI.rsi(mapping, 14).series();
            rsi.stroke("#bf360c");
        } else {
            plotIndex--;
            plotRSI.removeAllSeries();
            plotRSI.enabled(false);
        }
    }

    function drawADL() {
        if ($('#btnADL').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotADL = chart.plot(plotIndex);
            adl = plotADL.adl(mapping).series();
        } else {
            plotIndex--;
            plotADL.removeAllSeries();
            plotADL.enabled(false);
        }
    }

    function drawAroon() {
        if ($('#btnAroon').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotAroon = chart.plot(plotIndex);
            aroon = plotAroon.aroon(mapping, 25);
        } else {
            plotIndex--;
            plotAroon.removeAllSeries();
            plotAroon.enabled(false);
        }
    }

    function drawATR() {
        if ($('#btnATR').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotATR = chart.plot(plotIndex);
            atr = plotATR.atr(mapping, 14).series();
        } else {
            plotIndex--;
            plotATR.removeAllSeries();
            plotATR.enabled(false);
        }
    }

    function drawAO() {
        if ($('#btnAO').is(":checked")) {
            plotIndex++;
            chart.plot(plotIndex).enabled(true);
            plotAO = chart.plot(plotIndex);
            ao = plotAO.ao(mapping, 5, 34).series();
        } else {
            plotIndex--;
            plotAO.removeAllSeries();
            plotAO.enabled(false);
        }
    }
    // function template
    //function draw() {
    //    if ($('#btnA').is(":checked")) {
    //        plotIndex++;
    //        chart.plot(plotIndex).enabled(true);
    //        plotA = chart.plot(plotIndex);
    //        A = plotA;
    //    } else {
    //        plotIndex--;
    //        plotA.removeAllSeries();
    //        plotA.enabled(false);
    //    }
    //}

    // create annotations
    function create() {
        var select = document.getElementById("typeSelect");
        console.log(select.value);
        chart.annotations().startDrawing(select.value);
    }

    // remove all annotations
    function removeAll() {
        chart.annotations().removeAllAnnotations();
    }

    // remove the selected annotation
    function removeSelected() {
        // get the selected annotation
        var selectedAnnotation = chart.annotations().getSelectedAnnotation();
        // remove the selected annotation
        chart.annotations().removeAnnotation(selectedAnnotation);
    }

    function isLikeCheck() {
        // check stockID like by user.StockBag
        if ($("#isLike").is(":checked")) {
            $("#likeSVG").css("fill", "gray");
        } else {
            $("#likeSVG").css("fill", "none");
        }
        if ('@User.Identity.IsAuthenticated') {
            // ajax to post check to user.stockbag
            console.log("1234");
            $.ajax({
                async: "false",
                type: "post",
                url: "/stocks/Chart",
                data: {
                    isLike: $("#isLike").is(":checked"),
                    stockID: '@ViewBag.stockID'
                },
                success: function (data) {

                }
            })
            console.log("1234");

        }

    }
</script>